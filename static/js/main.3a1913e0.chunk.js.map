{"version":3,"sources":["components/Menu.js","components/GameStatus.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Menu","height","width","winningStreak","handleChange","createBoard","className","type","name","value","onChange","onClick","GameStatus","status","stepCount","toggleMenu","Game","board","streakCells","handleCellClick","style","gridTemplateColumns","gridTemplateRows","map","row","rIndex","cell","cIndex","classNames","streak","some","element","key","App","state","menu","parseInt","alert","isNaN","r","push","c","setState","newBoard","checkStatus","length","win","topLeftColIndex","bottomLeftColIndex","e","target","replace","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a1913e0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Menu({ height, width, winningStreak, handleChange, createBoard }) {\r\n  return (\r\n    <div className=\"menu-wrapper\">\r\n      <label>\r\n        Height:\r\n        <input\r\n          type=\"text\"\r\n          className=\"menu-input\"\r\n          name=\"height\"\r\n          value={height}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Width:\r\n        <input\r\n          type=\"text\"\r\n          className=\"menu-input\"\r\n          name=\"width\"\r\n          value={width}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Winning Streak:\r\n        <input\r\n          type=\"text\"\r\n          className=\"menu-input\"\r\n          name=\"winningStreak\"\r\n          value={winningStreak}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button className=\"btn\" onClick={createBoard}>\r\n        PLAY\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\n\r\nfunction GameStatus({ status, stepCount, toggleMenu }) {\r\n  if (status === \"PLAYING\") return null;\r\n\r\n  return (\r\n    <>\r\n      {status === \"WIN\" && (\r\n        <p className=\"status-text\">{stepCount % 2 ? \"X\" : \"O\"} Wins!</p>\r\n      )}\r\n\r\n      {status === \"TIE\" && <p className=\"status-text\">TIE</p>}\r\n\r\n      <button className=\"btn\" onClick={toggleMenu}>\r\n        New Game\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameStatus;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport GameStatus from \"./GameStatus\";\r\n\r\nfunction Game({\r\n  board,\r\n  width,\r\n  height,\r\n  streakCells,\r\n  status,\r\n  stepCount,\r\n  handleCellClick,\r\n  toggleMenu\r\n}) {\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      <div\r\n        className=\"game\"\r\n        style={{\r\n          gridTemplateColumns: `repeat(${width}, 50px)`,\r\n          gridTemplateRows: `repeat(${height}, 50px)`\r\n        }}\r\n      >\r\n        {board.map((row, rIndex) =>\r\n          row.map((cell, cIndex) => (\r\n            <div\r\n              className={classNames(\"cell\", {\r\n                streak: streakCells.some(\r\n                  element => element[0] === rIndex && element[1] === cIndex\r\n                )\r\n              })}\r\n              key={rIndex + cIndex}\r\n              onClick={() => handleCellClick(rIndex, cIndex)}\r\n            >\r\n              {cell}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <GameStatus\r\n        status={status}\r\n        stepCount={stepCount}\r\n        toggleMenu={toggleMenu}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Menu from \"./components/Menu\";\r\nimport Game from \"./components/Game\";\r\n\r\nexport class App extends Component {\r\n  state = {\r\n    board: [],\r\n    winningStreak: \"3\",\r\n    height: \"3\",\r\n    width: \"3\",\r\n    stepCount: 0,\r\n    status: \"\",\r\n    menu: true,\r\n    streakCells: []\r\n  };\r\n\r\n  createBoard = () => {\r\n    const height = parseInt(this.state.height);\r\n    const width = parseInt(this.state.width);\r\n    const winningStreak = parseInt(this.state.winningStreak);\r\n\r\n    if (winningStreak > height && winningStreak > width) {\r\n      alert(\"Streak cannot be longer than height/width\");\r\n      return;\r\n    }\r\n\r\n    if (isNaN(height) || isNaN(width) || isNaN(winningStreak)) {\r\n      alert(\"Please fill in all the fields\");\r\n      return;\r\n    }\r\n\r\n    const board = [];\r\n\r\n    for (let r = 0; r < height; r++) {\r\n      board.push([]);\r\n      for (let c = 0; c < width; c++) {\r\n        board[r].push(\"\");\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      board,\r\n      menu: false,\r\n      streakCells: [],\r\n      stepCount: 0,\r\n      status: \"PLAYING\"\r\n    });\r\n  };\r\n\r\n  handleCellClick = (rIndex, cIndex) => {\r\n    const board = this.state.board;\r\n    const stepCount = this.state.stepCount;\r\n    const status = this.state.status;\r\n    const cell = this.state.board[rIndex][cIndex];\r\n\r\n    if (status !== \"PLAYING\") return;\r\n\r\n    if (cell !== \"\") return;\r\n\r\n    //making sure we do not mutate the state\r\n    const newBoard = board.map(row => [...row]);\r\n    newBoard[rIndex][cIndex] = stepCount % 2 ? \"O\" : \"X\";\r\n\r\n    this.setState(\r\n      state => ({\r\n        board: newBoard,\r\n        stepCount: state.stepCount + 1\r\n      }),\r\n      () => this.checkStatus(rIndex, cIndex)\r\n    );\r\n  };\r\n\r\n  checkStatus = (rIndex, cIndex) => {\r\n    const board = this.state.board;\r\n    const cell = board[rIndex][cIndex];\r\n    const height = parseInt(this.state.height);\r\n    const width = parseInt(this.state.width);\r\n    const winningStreak = parseInt(this.state.winningStreak);\r\n    const stepCount = this.state.stepCount;\r\n\r\n    let streakCells = [];\r\n\r\n    //check cells vertically\r\n    for (let r = 0; r < height; r++) {\r\n      if (board[r][cIndex] === cell) {\r\n        streakCells.push([r, cIndex]);\r\n\r\n        if (streakCells.length >= winningStreak) {\r\n          this.win(streakCells);\r\n          return;\r\n        }\r\n      } else {\r\n        streakCells = [];\r\n      }\r\n    }\r\n    streakCells = [];\r\n\r\n    //check cells horizontally\r\n    for (let c = 0; c < width; c++) {\r\n      if (board[rIndex][c] === cell) {\r\n        streakCells.push([rIndex, c]);\r\n\r\n        if (streakCells.length >= winningStreak) {\r\n          this.win(streakCells);\r\n          return;\r\n        }\r\n      } else {\r\n        streakCells = [];\r\n      }\r\n    }\r\n    streakCells = [];\r\n\r\n    //check cells diagonally top left -> bottom right\r\n    let topLeftRowIndex = rIndex - cIndex >= 0 ? rIndex - cIndex : 0;\r\n    let topLeftColIndex = rIndex - cIndex >= 0 ? 0 : cIndex - rIndex;\r\n\r\n    for (let r = topLeftRowIndex; r < height; r++) {\r\n      if (topLeftColIndex >= width) break;\r\n\r\n      if (board[r][topLeftColIndex] === cell) {\r\n        streakCells.push([r, topLeftColIndex]);\r\n\r\n        if (streakCells.length >= winningStreak) {\r\n          this.win(streakCells);\r\n          return;\r\n        }\r\n      } else {\r\n        streakCells = [];\r\n      }\r\n\r\n      topLeftColIndex++;\r\n    }\r\n    streakCells = [];\r\n\r\n    //check cells diagonally bottom left -> top right\r\n    let bottomLeftRowIndex =\r\n      rIndex + cIndex - height >= 0 ? height - 1 : rIndex + cIndex;\r\n    let bottomLeftColIndex =\r\n      rIndex + cIndex - height >= 0 ? rIndex - (height - 1) + cIndex : 0;\r\n\r\n    for (let r = bottomLeftRowIndex; r >= 0; r--) {\r\n      if (bottomLeftColIndex >= width) break;\r\n\r\n      if (board[r][bottomLeftColIndex] === cell) {\r\n        streakCells.push([r, bottomLeftColIndex]);\r\n\r\n        if (streakCells.length >= winningStreak) {\r\n          this.win(streakCells);\r\n          return;\r\n        }\r\n      } else {\r\n        streakCells = [];\r\n      }\r\n\r\n      bottomLeftColIndex++;\r\n    }\r\n\r\n    //check for tie\r\n    if (stepCount >= height * width) {\r\n      this.setState({\r\n        status: \"TIE\"\r\n      });\r\n    }\r\n  };\r\n\r\n  win = streakCells => {\r\n    this.setState({\r\n      streakCells,\r\n      status: \"WIN\"\r\n    });\r\n  };\r\n\r\n  toggleMenu = () => {\r\n    this.setState(state => ({\r\n      menu: !state.menu\r\n    }));\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value.replace(/\\D/, \"\")\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const board = this.state.board;\r\n    const height = this.state.height;\r\n    const width = this.state.width;\r\n    const winningStreak = this.state.winningStreak;\r\n    const streakCells = this.state.streakCells;\r\n    const status = this.state.status;\r\n    const stepCount = this.state.stepCount;\r\n\r\n    if (this.state.menu) {\r\n      return (\r\n        <Menu\r\n          height={height}\r\n          width={width}\r\n          winningStreak={winningStreak}\r\n          handleChange={this.handleChange}\r\n          createBoard={this.createBoard}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Game\r\n        board={board}\r\n        width={width}\r\n        height={height}\r\n        streakCells={streakCells}\r\n        status={status}\r\n        stepCount={stepCount}\r\n        handleCellClick={this.handleCellClick}\r\n        toggleMenu={this.toggleMenu}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}