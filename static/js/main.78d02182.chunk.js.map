{"version":3,"sources":["components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Menu","height","width","winningStreak","handleChange","createBoard","className","type","name","value","onChange","onClick","App","state","board","stepCount","status","menu","streakCells","parseInt","alert","isNaN","r","push","c","setState","handleCellClick","rIndex","cIndex","cell","newBoard","map","row","checkStatus","length","win","topLeftColIndex","bottomLeftRowIndex","bottomLeftColIndex","e","target","replace","this","style","gridTemplateColumns","gridTemplateRows","classNames","streak","some","element","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78d02182.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Menu({ height, width, winningStreak, handleChange, createBoard }) {\r\n  return (\r\n    <div className=\"menu-wrapper\">\r\n      <label>\r\n        Height:\r\n        <input\r\n          type=\"text\"\r\n          name=\"height\"\r\n          value={height}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Width:\r\n        <input type=\"text\" name=\"width\" value={width} onChange={handleChange} />\r\n      </label>\r\n      <label>\r\n        Winning Streak:\r\n        <input\r\n          type=\"text\"\r\n          name=\"winningStreak\"\r\n          value={winningStreak}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button className=\"btn\" onClick={createBoard}>\r\n        PLAY\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n\nimport Menu from \"./components/Menu\";\n\nexport class App extends Component {\n  state = {\n    board: [],\n    winningStreak: \"3\",\n    height: \"3\",\n    width: \"3\",\n    stepCount: 0,\n    status: \"\",\n    menu: true,\n    streakCells: []\n  };\n\n  createBoard = () => {\n    const height = parseInt(this.state.height);\n    const width = parseInt(this.state.width);\n    const winningStreak = parseInt(this.state.winningStreak);\n\n    if (winningStreak > height && winningStreak > width) {\n      alert(\"Streak cannot be longer than height/width\");\n      return;\n    }\n\n    if (isNaN(height) || isNaN(width) || isNaN(winningStreak)) {\n      alert(\"Please fill in all the fields\");\n      return;\n    }\n\n    let board = [];\n\n    for (let r = 0; r < this.state.height; r++) {\n      board.push([]);\n      for (let c = 0; c < this.state.width; c++) {\n        board[r].push(\"\");\n      }\n    }\n\n    this.setState({\n      board,\n      menu: false,\n      streakCells: [],\n      stepCount: 0,\n      status: \"PLAYING\"\n    });\n  };\n\n  handleCellClick = (rIndex, cIndex) => {\n    const cell = this.state.board[rIndex][cIndex];\n\n    if (this.state.status !== \"PLAYING\") return;\n\n    if (cell !== \"\") return;\n\n    const newBoard = this.state.board.map(row => [...row]);\n    newBoard[rIndex][cIndex] = this.state.stepCount % 2 === 0 ? \"X\" : \"O\";\n\n    this.setState(\n      state => ({\n        board: newBoard,\n        stepCount: state.stepCount + 1\n      }),\n      () => this.checkStatus(rIndex, cIndex)\n    );\n  };\n\n  checkStatus = (rIndex, cIndex) => {\n    const cell = this.state.board[rIndex][cIndex];\n    let streakCells = [];\n\n    //check cells vertically\n    for (let r = 0; r < this.state.height; r++) {\n      if (this.state.board[r][cIndex] === cell) {\n        streakCells.push([r, cIndex]);\n\n        if (streakCells.length >= this.state.winningStreak) {\n          this.win(streakCells);\n          return;\n        }\n      } else {\n        streakCells = [];\n      }\n    }\n\n    streakCells = [];\n\n    //check cells horizontally\n    for (let c = 0; c < this.state.width; c++) {\n      if (this.state.board[rIndex][c] === cell) {\n        streakCells.push([rIndex, c]);\n\n        if (streakCells.length >= this.state.winningStreak) {\n          this.win(streakCells);\n          return;\n        }\n      } else {\n        streakCells = [];\n      }\n    }\n\n    streakCells = [];\n\n    //check cells diagonally top->bottom\n    let topLeftRowIndex = rIndex >= cIndex ? rIndex - cIndex : 0;\n    let topLeftColIndex = rIndex >= cIndex ? 0 : cIndex - rIndex;\n\n    for (let r = topLeftRowIndex; r < this.state.height; r++) {\n      if (topLeftColIndex >= this.state.width) break;\n\n      if (this.state.board[r][topLeftColIndex] === cell) {\n        streakCells.push([r, topLeftColIndex]);\n\n        if (streakCells.length >= this.state.winningStreak) {\n          this.win(streakCells);\n          return;\n        }\n      } else {\n        streakCells = [];\n      }\n\n      topLeftColIndex += 1;\n    }\n\n    streakCells = [];\n\n    //check cells diagonally bottom->top\n    let bottomLeftRowIndex =\n      rIndex + cIndex >= this.state.height\n        ? this.state.height - 1\n        : rIndex + cIndex;\n\n    let bottomLeftColIndex =\n      rIndex + cIndex >= this.state.height\n        ? rIndex + cIndex - (this.state.height - 1)\n        : 0;\n\n    for (let r = bottomLeftRowIndex; r >= 0; r--) {\n      if (bottomLeftColIndex >= this.state.width) break;\n\n      if (this.state.board[r][bottomLeftColIndex] === cell) {\n        streakCells.push([r, bottomLeftColIndex]);\n\n        if (streakCells.length >= this.state.winningStreak) {\n          this.win(streakCells);\n          return;\n        }\n      } else {\n        streakCells = [];\n      }\n\n      bottomLeftColIndex += 1;\n    }\n\n    //check for tie\n    if (this.state.stepCount >= this.state.height * this.state.width) {\n      this.setState({\n        status: \"TIE\"\n      });\n    }\n  };\n\n  win = streakCells => {\n    this.setState({\n      streakCells,\n      status: \"WIN\"\n    });\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value.replace(/\\D/, \"\")\n    });\n  };\n\n  render() {\n    if (this.state.menu) {\n      return (\n        <Menu\n          height={this.state.height}\n          width={this.state.width}\n          winningStreak={this.state.winningStreak}\n          handleChange={this.handleChange}\n          createBoard={this.createBoard}\n        />\n      );\n    }\n\n    return (\n      <div className=\"game-wrapper\">\n        <div\n          className=\"game\"\n          style={{\n            gridTemplateColumns: `repeat(${this.state.width}, 50px)`,\n            gridTemplateRows: `repeat(${this.state.height}, 50px)`\n          }}\n        >\n          {this.state.board.map((row, rIndex) =>\n            row.map((cell, cIndex) => (\n              <div\n                className={classNames(\"cell\", {\n                  streak: this.state.streakCells.some(\n                    element => element[0] === rIndex && element[1] === cIndex\n                  )\n                })}\n                key={rIndex + cIndex}\n                onClick={() => this.handleCellClick(rIndex, cIndex)}\n              >\n                {cell}\n              </div>\n            ))\n          )}\n        </div>\n\n        {this.state.status === \"WIN\" && (\n          <p>{this.state.stepCount % 2 === 0 ? \"O\" : \"X\"} Wins!</p>\n        )}\n\n        {this.state.status === \"TIE\" && <p>TIE</p>}\n\n        {this.state.status !== \"PLAYING\" && (\n          <button className=\"btn\" onClick={() => this.setState({ menu: true })}>\n            New Game\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}